// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RobotWars.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A Single Robot Rover")]
    public partial class ASingleRobotRoverFeature
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "ASingleRobotRover.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "A Single Robot Rover", "In order to control a rover, \nAs NASA \nI want to sends a simple string of letters" +
                    " to the RoverSquadControl", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Control 1 Rover in a 5x5 Plateau")]
        [NUnit.Framework.CategoryAttribute("acceptance")]
        public virtual void Control1RoverInA5X5Plateau()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Control 1 Rover in a 5x5 Plateau", new string[] {
                        "acceptance"});
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have a RoverRoverSquadControl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
            testRunner.And("I enter the command 5 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
            testRunner.And("I enter the command 1 1 N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
            testRunner.And("I enter the command M", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
            testRunner.When("I enter the GO command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
            testRunner.Then("the output should be 1 2 N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Control 1 Rover in a 4x4 Plateau")]
        [NUnit.Framework.CategoryAttribute("acceptance")]
        public virtual void Control1RoverInA4X4Plateau()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Control 1 Rover in a 4x4 Plateau", new string[] {
                        "acceptance"});
#line 16
            this.ScenarioSetup(scenarioInfo);
#line 17
            testRunner.Given("I have a RoverRoverSquadControl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
            testRunner.And("I enter the command 4 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
            testRunner.And("I enter the command 0 0 N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
            testRunner.And("I enter the command MR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
            testRunner.When("I enter the GO command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
            testRunner.Then("the output should be 0 1 E", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Rover that goes out of bounds")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void ARoverThatGoesOutOfBounds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Rover that goes out of bounds", new string[] {
                        "ignore"});
#line 25
            this.ScenarioSetup(scenarioInfo);
#line 26
            testRunner.Given("I have a RoverRoverSquadControl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
            testRunner.And("I enter the command 2 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
            testRunner.And("I enter the command 0 0 N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
            testRunner.And("I enter the command MM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
            testRunner.When("I enter the GO command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
            testRunner.Then("the output should be 0 1 N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

