// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RobotWars.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MultipleMarsRovers")]
    public partial class MultipleMarsRoversFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MultipleRobotRovers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MultipleMarsRovers", "In order to control multiple mars rovers, \nAs NASA \nI want to sends a simple stri" +
                    "ng of letters to the RoverSquadControl", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("5 x 5 Plateau with 2 Rovers")]
        [NUnit.Framework.CategoryAttribute("acceptance")]
        public virtual void _5X5PlateauWith2Rovers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5 x 5 Plateau with 2 Rovers", new string[] {
                        "acceptance"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a RobotSquadControl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "<Test Input>"});
            table1.AddRow(new string[] {
                        "5 5"});
            table1.AddRow(new string[] {
                        "1 2 N"});
            table1.AddRow(new string[] {
                        "LMLMLMLMM"});
            table1.AddRow(new string[] {
                        "3 3 E"});
            table1.AddRow(new string[] {
                        "MMRMMRMRRM"});
#line 9
 testRunner.When("I send the the commands:", ((string)(null)), table1, "When ");
#line 16
 testRunner.When("I enter the GO command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "<Expected Output>"});
            table2.AddRow(new string[] {
                        "1 3 N"});
            table2.AddRow(new string[] {
                        "5 1 E"});
#line 17
 testRunner.Then("the result should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("5 x 5 Plateau with 3 Rovers")]
        public virtual void _5X5PlateauWith3Rovers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5 x 5 Plateau with 3 Rovers", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have a RobotSquadControl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "<Test Input>"});
            table3.AddRow(new string[] {
                        "5 5"});
            table3.AddRow(new string[] {
                        "1 2 N"});
            table3.AddRow(new string[] {
                        "LMLMLMLMM"});
            table3.AddRow(new string[] {
                        "3 3 E"});
            table3.AddRow(new string[] {
                        "MMRMMRMRRM"});
            table3.AddRow(new string[] {
                        "0 0 E"});
            table3.AddRow(new string[] {
                        "MMMMLM"});
#line 25
 testRunner.When("I send the the commands:", ((string)(null)), table3, "When ");
#line 34
 testRunner.When("I enter the GO command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "<Expected Output>"});
            table4.AddRow(new string[] {
                        "1 3 N"});
            table4.AddRow(new string[] {
                        "5 1 E"});
            table4.AddRow(new string[] {
                        "4 1 N"});
#line 35
 testRunner.Then("the result should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

